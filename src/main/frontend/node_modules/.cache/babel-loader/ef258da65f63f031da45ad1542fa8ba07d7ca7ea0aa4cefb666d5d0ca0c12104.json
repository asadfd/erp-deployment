{"ast":null,"code":"import React,{useState,useEffect}from'react';import axios from'axios';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Notifications=()=>{const[notifications,setNotifications]=useState([]);const[unreadCount,setUnreadCount]=useState(0);const[loading,setLoading]=useState(true);const[filter,setFilter]=useState('all');// all, unread\nuseEffect(()=>{fetchNotifications();fetchUnreadCount();},[filter]);const fetchNotifications=async()=>{try{setLoading(true);const endpoint=filter==='unread'?'/api/notifications/unread':'/api/notifications';const response=await axios.get(endpoint,{withCredentials:true});setNotifications(response.data);}catch(err){console.error('Error fetching notifications:',err);}finally{setLoading(false);}};const fetchUnreadCount=async()=>{try{const response=await axios.get('/api/notifications/unread-count',{withCredentials:true});setUnreadCount(response.data.count);}catch(err){console.error('Error fetching unread count:',err);}};const markAsRead=async notificationId=>{try{await axios.post(\"/api/notifications/mark-read/\".concat(notificationId),{},{withCredentials:true});fetchNotifications();fetchUnreadCount();}catch(err){console.error('Error marking notification as read:',err);}};const markAllAsRead=async()=>{try{await axios.post('/api/notifications/mark-all-read',{},{withCredentials:true});fetchNotifications();fetchUnreadCount();}catch(err){console.error('Error marking all as read:',err);}};const getNotificationIcon=type=>{switch(type){case'EMPLOYEE_REQUEST_APPROVED':return'✓';case'EMPLOYEE_REQUEST_REJECTED':return'✗';default:return'ℹ';}};const getNotificationClass=(type,isRead)=>{let baseClass='notification-item ';if(!isRead)baseClass+='unread ';switch(type){case'EMPLOYEE_REQUEST_APPROVED':return baseClass+'notification-success';case'EMPLOYEE_REQUEST_REJECTED':return baseClass+'notification-danger';default:return baseClass+'notification-info';}};if(loading)return/*#__PURE__*/_jsx(\"div\",{children:\"Loading notifications...\"});return/*#__PURE__*/_jsxs(\"div\",{className:\"notifications-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"notifications-header\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"Notifications \",unreadCount>0&&/*#__PURE__*/_jsx(\"span\",{className:\"badge\",children:unreadCount})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"notifications-controls\",children:[/*#__PURE__*/_jsxs(\"select\",{value:filter,onChange:e=>setFilter(e.target.value),className:\"filter-select\",children:[/*#__PURE__*/_jsx(\"option\",{value:\"all\",children:\"All Notifications\"}),/*#__PURE__*/_jsx(\"option\",{value:\"unread\",children:\"Unread Only\"})]}),unreadCount>0&&/*#__PURE__*/_jsx(\"button\",{onClick:markAllAsRead,className:\"btn btn-secondary\",children:\"Mark All as Read\"})]})]}),notifications.length===0?/*#__PURE__*/_jsx(\"p\",{className:\"no-notifications\",children:\"No notifications to display\"}):/*#__PURE__*/_jsx(\"div\",{className:\"notifications-list\",children:notifications.map(notification=>/*#__PURE__*/_jsxs(\"div\",{className:getNotificationClass(notification.type,notification.read),children:[/*#__PURE__*/_jsx(\"div\",{className:\"notification-icon\",children:getNotificationIcon(notification.type)}),/*#__PURE__*/_jsxs(\"div\",{className:\"notification-content\",children:[/*#__PURE__*/_jsx(\"h4\",{children:notification.title}),/*#__PURE__*/_jsx(\"p\",{children:notification.message}),/*#__PURE__*/_jsx(\"small\",{children:new Date(notification.createdAt).toLocaleString()})]}),!notification.read&&/*#__PURE__*/_jsx(\"button\",{onClick:()=>markAsRead(notification.id),className:\"mark-read-btn\",children:\"Mark as Read\"})]},notification.id))}),/*#__PURE__*/_jsx(\"style\",{jsx:true,children:\"\\n        .notifications-container {\\n          margin-top: 2rem;\\n          background: white;\\n          padding: 1.5rem;\\n          border-radius: 8px;\\n          box-shadow: 0 2px 4px rgba(0,0,0,0.1);\\n        }\\n\\n        .notifications-header {\\n          display: flex;\\n          justify-content: space-between;\\n          align-items: center;\\n          margin-bottom: 1rem;\\n        }\\n\\n        .notifications-header h2 {\\n          display: flex;\\n          align-items: center;\\n          gap: 10px;\\n        }\\n\\n        .badge {\\n          background: #dc3545;\\n          color: white;\\n          padding: 2px 8px;\\n          border-radius: 12px;\\n          font-size: 14px;\\n        }\\n\\n        .notifications-controls {\\n          display: flex;\\n          gap: 10px;\\n          align-items: center;\\n        }\\n\\n        .filter-select {\\n          padding: 5px 10px;\\n          border: 1px solid #ccc;\\n          border-radius: 4px;\\n        }\\n\\n        .notifications-list {\\n          display: flex;\\n          flex-direction: column;\\n          gap: 10px;\\n        }\\n\\n        .notification-item {\\n          display: flex;\\n          align-items: center;\\n          padding: 15px;\\n          border: 1px solid #e0e0e0;\\n          border-radius: 8px;\\n          background: #f8f9fa;\\n        }\\n\\n        .notification-item.unread {\\n          background: white;\\n          border-color: #007bff;\\n        }\\n\\n        .notification-success {\\n          border-left: 4px solid #28a745;\\n        }\\n\\n        .notification-danger {\\n          border-left: 4px solid #dc3545;\\n        }\\n\\n        .notification-info {\\n          border-left: 4px solid #17a2b8;\\n        }\\n\\n        .notification-icon {\\n          font-size: 24px;\\n          margin-right: 15px;\\n        }\\n\\n        .notification-content {\\n          flex: 1;\\n        }\\n\\n        .notification-content h4 {\\n          margin: 0 0 5px 0;\\n          font-size: 16px;\\n        }\\n\\n        .notification-content p {\\n          margin: 0 0 5px 0;\\n          color: #666;\\n        }\\n\\n        .notification-content small {\\n          color: #999;\\n        }\\n\\n        .mark-read-btn {\\n          padding: 5px 10px;\\n          border: none;\\n          background: #007bff;\\n          color: white;\\n          border-radius: 4px;\\n          cursor: pointer;\\n        }\\n\\n        .no-notifications {\\n          text-align: center;\\n          color: #666;\\n          padding: 2rem;\\n        }\\n      \"})]});};export default Notifications;","map":{"version":3,"names":["React","useState","useEffect","axios","jsx","_jsx","jsxs","_jsxs","Notifications","notifications","setNotifications","unreadCount","setUnreadCount","loading","setLoading","filter","setFilter","fetchNotifications","fetchUnreadCount","endpoint","response","get","withCredentials","data","err","console","error","count","markAsRead","notificationId","post","concat","markAllAsRead","getNotificationIcon","type","getNotificationClass","isRead","baseClass","children","className","value","onChange","e","target","onClick","length","map","notification","read","title","message","Date","createdAt","toLocaleString","id"],"sources":["C:/Users/Asad Dimtimkar/IdeaProjects/ERPcustom/src/main/frontend/src/components/Notifications.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst Notifications = () => {\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [filter, setFilter] = useState('all'); // all, unread\n\n  useEffect(() => {\n    fetchNotifications();\n    fetchUnreadCount();\n  }, [filter]);\n\n  const fetchNotifications = async () => {\n    try {\n      setLoading(true);\n      const endpoint = filter === 'unread' ? '/api/notifications/unread' : '/api/notifications';\n      const response = await axios.get(endpoint, {\n        withCredentials: true\n      });\n      setNotifications(response.data);\n    } catch (err) {\n      console.error('Error fetching notifications:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchUnreadCount = async () => {\n    try {\n      const response = await axios.get('/api/notifications/unread-count', {\n        withCredentials: true\n      });\n      setUnreadCount(response.data.count);\n    } catch (err) {\n      console.error('Error fetching unread count:', err);\n    }\n  };\n\n  const markAsRead = async (notificationId) => {\n    try {\n      await axios.post(`/api/notifications/mark-read/${notificationId}`, {}, {\n        withCredentials: true\n      });\n      fetchNotifications();\n      fetchUnreadCount();\n    } catch (err) {\n      console.error('Error marking notification as read:', err);\n    }\n  };\n\n  const markAllAsRead = async () => {\n    try {\n      await axios.post('/api/notifications/mark-all-read', {}, {\n        withCredentials: true\n      });\n      fetchNotifications();\n      fetchUnreadCount();\n    } catch (err) {\n      console.error('Error marking all as read:', err);\n    }\n  };\n\n  const getNotificationIcon = (type) => {\n    switch (type) {\n      case 'EMPLOYEE_REQUEST_APPROVED':\n        return '✓';\n      case 'EMPLOYEE_REQUEST_REJECTED':\n        return '✗';\n      default:\n        return 'ℹ';\n    }\n  };\n\n  const getNotificationClass = (type, isRead) => {\n    let baseClass = 'notification-item ';\n    if (!isRead) baseClass += 'unread ';\n    \n    switch (type) {\n      case 'EMPLOYEE_REQUEST_APPROVED':\n        return baseClass + 'notification-success';\n      case 'EMPLOYEE_REQUEST_REJECTED':\n        return baseClass + 'notification-danger';\n      default:\n        return baseClass + 'notification-info';\n    }\n  };\n\n  if (loading) return <div>Loading notifications...</div>;\n\n  return (\n    <div className=\"notifications-container\">\n      <div className=\"notifications-header\">\n        <h2>Notifications {unreadCount > 0 && <span className=\"badge\">{unreadCount}</span>}</h2>\n        <div className=\"notifications-controls\">\n          <select \n            value={filter} \n            onChange={(e) => setFilter(e.target.value)}\n            className=\"filter-select\"\n          >\n            <option value=\"all\">All Notifications</option>\n            <option value=\"unread\">Unread Only</option>\n          </select>\n          {unreadCount > 0 && (\n            <button onClick={markAllAsRead} className=\"btn btn-secondary\">\n              Mark All as Read\n            </button>\n          )}\n        </div>\n      </div>\n\n      {notifications.length === 0 ? (\n        <p className=\"no-notifications\">No notifications to display</p>\n      ) : (\n        <div className=\"notifications-list\">\n          {notifications.map((notification) => (\n            <div \n              key={notification.id} \n              className={getNotificationClass(notification.type, notification.read)}\n            >\n              <div className=\"notification-icon\">\n                {getNotificationIcon(notification.type)}\n              </div>\n              <div className=\"notification-content\">\n                <h4>{notification.title}</h4>\n                <p>{notification.message}</p>\n                <small>{new Date(notification.createdAt).toLocaleString()}</small>\n              </div>\n              {!notification.read && (\n                <button \n                  onClick={() => markAsRead(notification.id)}\n                  className=\"mark-read-btn\"\n                >\n                  Mark as Read\n                </button>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n\n      <style jsx>{`\n        .notifications-container {\n          margin-top: 2rem;\n          background: white;\n          padding: 1.5rem;\n          border-radius: 8px;\n          box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }\n\n        .notifications-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 1rem;\n        }\n\n        .notifications-header h2 {\n          display: flex;\n          align-items: center;\n          gap: 10px;\n        }\n\n        .badge {\n          background: #dc3545;\n          color: white;\n          padding: 2px 8px;\n          border-radius: 12px;\n          font-size: 14px;\n        }\n\n        .notifications-controls {\n          display: flex;\n          gap: 10px;\n          align-items: center;\n        }\n\n        .filter-select {\n          padding: 5px 10px;\n          border: 1px solid #ccc;\n          border-radius: 4px;\n        }\n\n        .notifications-list {\n          display: flex;\n          flex-direction: column;\n          gap: 10px;\n        }\n\n        .notification-item {\n          display: flex;\n          align-items: center;\n          padding: 15px;\n          border: 1px solid #e0e0e0;\n          border-radius: 8px;\n          background: #f8f9fa;\n        }\n\n        .notification-item.unread {\n          background: white;\n          border-color: #007bff;\n        }\n\n        .notification-success {\n          border-left: 4px solid #28a745;\n        }\n\n        .notification-danger {\n          border-left: 4px solid #dc3545;\n        }\n\n        .notification-info {\n          border-left: 4px solid #17a2b8;\n        }\n\n        .notification-icon {\n          font-size: 24px;\n          margin-right: 15px;\n        }\n\n        .notification-content {\n          flex: 1;\n        }\n\n        .notification-content h4 {\n          margin: 0 0 5px 0;\n          font-size: 16px;\n        }\n\n        .notification-content p {\n          margin: 0 0 5px 0;\n          color: #666;\n        }\n\n        .notification-content small {\n          color: #999;\n        }\n\n        .mark-read-btn {\n          padding: 5px 10px;\n          border: none;\n          background: #007bff;\n          color: white;\n          border-radius: 4px;\n          cursor: pointer;\n        }\n\n        .no-notifications {\n          text-align: center;\n          color: #666;\n          padding: 2rem;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default Notifications;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}